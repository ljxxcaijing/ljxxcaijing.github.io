<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Never But Life</title>
    <link>http://ljxxcaijing.github.io/</link>
    <description>Recent content on Never But Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ljxxcaijing.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>API是什么？能做什么？</title>
            <link>http://ljxxcaijing.github.io/post/api/</link>
            <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/api/</guid>
            <description>

&lt;h1 id=&#34;api是什么-能做什么:00e71df22262087fd8ad820708997657&#34;&gt;API是什么？能做什么?&lt;/h1&gt;

&lt;h1 id=&#34;api-application-programming-interface-应用程序编程接口:00e71df22262087fd8ad820708997657&#34;&gt;API（Application Programming Interface,应用程序编程接口）&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;最简单的API请求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://freegeoip.net/json/50.78.253.58&#34;&gt;http://freegeoip.net/json/50.78.253.58&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;API和网址访问的区别：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API可以通过HTTP协议下载文件，几乎可以实现所有在网上干的事情&lt;/li&gt;
&lt;li&gt;API请求使用非常严谨的语法&lt;/li&gt;
&lt;li&gt;API使用JSON或者XML格式表示数据，而不是HTML格式&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、GET&lt;/p&gt;

&lt;p&gt;“喂，网络服务器，请按照这个网址给我信息。”
访问&lt;a href=&#34;http://ljxxcaijing.github.io/post/时，就会使用GET方法&#34;&gt;http://ljxxcaijing.github.io/post/时，就会使用GET方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、POST&lt;/p&gt;

&lt;p&gt;“请吧信息保存在你的数据库里。”
填写表单或者提交信息到网络服务器的后端时，就会使用POST方法&lt;/p&gt;

&lt;p&gt;3、PUT&lt;/p&gt;

&lt;p&gt;更新一个对象或者信息&lt;/p&gt;

&lt;p&gt;4、DELETE&lt;/p&gt;

&lt;p&gt;删除一个对象，在公用API里不常用&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;验证：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目的：“限制”用户使用API&lt;/p&gt;

&lt;p&gt;方式：使用令牌token的方式，令牌是通过服务器对用户名和密码的组合处理后生成的&lt;/p&gt;

&lt;p&gt;API key或者OAuth&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;服务器响应：&lt;/strong&gt;
API会返回格式友好的数据，数据格式大部分是JSON和XML。&lt;/p&gt;

&lt;p&gt;XML:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;user&amp;gt;&amp;lt;firstname&amp;gt;Ryan&amp;lt;/firstname&amp;gt;&amp;lt;lastname&amp;gt;Mitchell&amp;lt;/lastname&amp;gt;&amp;lt;username&amp;gt;Kludgist&amp;lt;/username&amp;gt;&amp;lt;/user&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSON:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{&amp;quot;user&amp;quot;:{&amp;quot;firstname&amp;quot;:&amp;quot;Ryan&amp;quot;,&amp;quot;Lastname&amp;quot;:&amp;quot;Mitchell&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;Kludgist&amp;quot;}}&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;API调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;URL:需要的数据范围&lt;/p&gt;

&lt;p&gt;查询参数：过滤器或附加请求&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;解析JSON：
这是一个坑，以后会填的坑……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;开放的API平台：&lt;/p&gt;

&lt;p&gt;国内：&lt;/p&gt;

&lt;p&gt;豆瓣API（现在不能用了）
微博API（&lt;a href=&#34;http://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI）&#34;&gt;http://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;国外：&lt;/p&gt;

&lt;p&gt;google API（&lt;a href=&#34;https://console.developers.google.com/apis/api/places_backend/overview?hl=zh-cn）&#34;&gt;https://console.developers.google.com/apis/api/places_backend/overview?hl=zh-cn）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter API（pip install twitter）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;解析JSON数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON解析库是Python标准库的一部分，&lt;/p&gt;

&lt;p&gt;Python把JSON转换成字典，JSON数组转换成列表，JSON字符转换成Python字符串。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;API与网络数据采集的关系&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import json&lt;/code&gt;
未完待续……&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Python正则表达式与爬虫</title>
            <link>http://ljxxcaijing.github.io/post/zhengze/</link>
            <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/zhengze/</guid>
            <description>

&lt;h1 id=&#34;python正则表达式总结:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;Python正则表达式总结&lt;/h1&gt;

&lt;p&gt;当初学Python的时候，看完了基础部分就去看Flask，所以回过头来看正则表达式，其实是因为爬虫应用中，要用正则表达式来做选择和匹配。所以完整的看了正则表达式。&lt;/p&gt;

&lt;p&gt;总结了一些常用的知识点。&lt;/p&gt;

&lt;h1 id=&#34;正则表达式:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;正则表达式：&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;闭包操作符&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;｜  任意多个&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.   任意单个&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python正则表达式:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;Python正则表达式：&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;常用is 和 is not&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;import re 导入有关正则的re模块&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;compile() 编译正则表达式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;group() 匹配对象，没有子组返回空元组&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;groups() 匹配对象，没有自组返回全部匹配对象&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match() 匹配字符串，结合group()显示成功的匹配&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;search() 在一个字符串中查找一个模式
匹配了返回对象，否则返回None&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;findall() 找到每个出现的匹配部分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sub() 搜索和替换&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;subn() 替换&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;split() 分割&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;example:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;EXAMPLE:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;使用re.match查找 – 匹配开始&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;lt;_sre.SRE_Match object at 0xb743e720&amp;lt;
&amp;gt;&amp;gt;&amp;gt; match = re.match(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;dog&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用re.search查找 – 匹配任意位置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;search(r&#39;cat&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;cat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; match = re.search(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;dog&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用 re.findall – 所有匹配对象(多)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[&#39;dog&#39;, &#39;dog&#39;]
&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;cat&#39;, &#39;dog cat dog&#39;)
[&#39;cat&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>初识c&#43;&#43;</title>
            <link>http://ljxxcaijing.github.io/post/c&#43;&#43;/</link>
            <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/c&#43;&#43;/</guid>
            <description>

&lt;h1 id=&#34;在mac上写c:7c4c182d751fc2e04b05feaeb26136e9&#34;&gt;在Mac上写C++&lt;/h1&gt;

&lt;p&gt;下午有个C++的选修课要结课了，其实选修课能学到的很少，不过还是能总结一些C和C++的关系的。
其实这篇基本是在以前的一篇基础上修改的。&lt;/p&gt;

&lt;p&gt;先在Mac上就简单弄一下吧。&lt;/p&gt;

&lt;p&gt;1.现有的软件：Sublime text 2、Vim&lt;/p&gt;

&lt;p&gt;2.在终端里面安装gcc&lt;/p&gt;

&lt;p&gt;3.开始编译吧！&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ vim &lt;/pre&gt;&lt;/code&gt;     //进入vim&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; :new hello.c &lt;/pre&gt;&lt;/code&gt;       //在vim中新建hello.c文件&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; i &lt;/pre&gt;&lt;/code&gt;                   //打开vim后先输入i进入编辑状态&lt;/p&gt;

&lt;p&gt;开始Hello World吧！&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &lt;iostream&gt;  //一定是要iostream，不能是iostream.h&lt;/p&gt;

&lt;p&gt;int main()&lt;/p&gt;

&lt;p&gt;{
    cout &amp;lt;&amp;lt; &amp;ldquo;Hello World&amp;rdquo;;    //输出Hello World
    return 0;&lt;/p&gt;

&lt;p&gt;}&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; ESC键 &lt;/pre&gt;&lt;/code&gt;             //按ESC键退出编辑状态&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;:wq  &lt;/pre&gt;&lt;/code&gt;              //先输入“:”，再输入“w”表示保存，最后输入“q”表示退出&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ g++ Hello.c &lt;/pre&gt;&lt;/code&gt;     //注意是g++，而不是gcc，编译Hello.c文件，会生成可执行文件“a.out”&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ ./a.out &lt;/pre&gt;&lt;/code&gt;         //执行a.out&lt;/p&gt;

&lt;p&gt;然后就出现了“Hello World!”&lt;/p&gt;

&lt;p&gt;未完待续………&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>在Mac上写c语言</title>
            <link>http://ljxxcaijing.github.io/post/c/</link>
            <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/c/</guid>
            <description>

&lt;h1 id=&#34;在mac上写c语言:764b7448d9f48713d096f1fadb72b9a9&#34;&gt;在Mac上写c语言&lt;/h1&gt;

&lt;p&gt;其实在Mac上写c语言最好还是用Xcode吧，但是不想再装软件了，而且主要还是要用window的cFree写，要应付作业啊。&lt;/p&gt;

&lt;p&gt;所以在Mac上就简单弄一下吧。&lt;/p&gt;

&lt;p&gt;1.现有的软件：Sublime text 2、Vim&lt;/p&gt;

&lt;p&gt;2.在终端里面安装gcc&lt;/p&gt;

&lt;p&gt;3.开始编译吧！&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ touch Hello.c &lt;/pre&gt;&lt;/code&gt;     //创建一个Hello.c文件（本目录下）&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ vim Hello.c &lt;/pre&gt;&lt;/code&gt;       //用vim编辑Hello.c文件&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; i &lt;/pre&gt;&lt;/code&gt;                   //打开vim后先输入i进入编辑状态&lt;/p&gt;

&lt;p&gt;*********&lt;strong&gt;&lt;em&gt;以下为vim中输入的程序&lt;/em&gt;&lt;/strong&gt;*************&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &lt;stdio.h&gt;&lt;/p&gt;

&lt;p&gt;int main()&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;printf(“Hello Mac ! \n”);&lt;/p&gt;

&lt;p&gt;}&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; ESC键 &lt;/pre&gt;&lt;/code&gt;             //按ESC键退出编辑状态&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;:wq  &lt;/pre&gt;&lt;/code&gt;              //先输入“:”，再输入“w”表示保存，最后输入“q”表示退出&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ gcc Hello.c &lt;/pre&gt;&lt;/code&gt;     //编译Hello.c文件，会生成可执行文件“a.out”&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt; $ ./a.out &lt;/pre&gt;&lt;/code&gt;         //执行a.out&lt;/p&gt;

&lt;p&gt;然后就出现了“Hello Mac !”&lt;/p&gt;

&lt;p&gt;成功啦！&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>学习Linux有感</title>
            <link>http://ljxxcaijing.github.io/post/linux/</link>
            <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/linux/</guid>
            <description>

&lt;h1 id=&#34;hello-linux:34fe9f2d9cc3cd7e319ca75e7da08332&#34;&gt;Hello, Linux!&lt;/h1&gt;

&lt;p&gt;1.
Linux命令行
服务器用Linux的多&lt;/p&gt;

&lt;p&gt;Linux和python关系紧密
Linux由库和包组成&lt;/p&gt;

&lt;p&gt;2.有趣的命令行
sleep 30  休眠30秒&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>git：简易实用功能</title>
            <link>http://ljxxcaijing.github.io/post/git/</link>
            <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/git/</guid>
            <description>

&lt;h1 id=&#34;git最简单最实用的教程:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;git最简单最实用的教程!&lt;/h1&gt;

&lt;h1 id=&#34;其实这主要是写给我自己看的-有的时候会忘记一些步骤-然后就一脸懵比-写博客有助于记忆:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;其实这主要是写给我自己看的，有的时候会忘记一些步骤，然后就一脸懵比，写博客有助于记忆。&lt;/h1&gt;

&lt;p&gt;1.github上新建一个仓库&lt;/p&gt;

&lt;p&gt;2.本地新建一个同名的文件夹&lt;/p&gt;

&lt;p&gt;3.在文件夹里面写你想推到github上的代码文件&lt;/p&gt;

&lt;p&gt;4.对 public 开始进行 git 管理
&lt;pre&gt;&lt;code&gt;$ git init&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;
5.添加远程仓库
&lt;pre&gt;&lt;code&gt;$ git remote add origin &lt;a href=&#34;https://github.com/用户名/仓库名.git&#34;&gt;https://github.com/用户名/仓库名.git&lt;/a&gt; &lt;/pre&gt;&lt;/code&gt;
如果你手抖不小心添加错了仓库，可以输入这一行来删除原来的仓库，再添加正确的仓库
&lt;pre&gt;&lt;code&gt;$ git remote rm origin &lt;/pre&gt;&lt;/code&gt;
6.跟踪所有文件
&lt;pre&gt;&lt;code&gt;$ git add . &lt;/pre&gt;&lt;/code&gt;
7.提交并加备注
&lt;pre&gt;&lt;code&gt;$ git commit -m “first commit” &lt;/pre&gt;&lt;/code&gt;
8.推送到远程仓库
&lt;pre&gt;&lt;code&gt;$ git push -u origin master  &lt;/pre&gt;&lt;/code&gt;
如果报错，就先pull一下再push试试看
&lt;pre&gt;&lt;code&gt;$ git pull origin master  &lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;等待100%出现，成功啦！&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>《图解HTTP》总结</title>
            <link>http://ljxxcaijing.github.io/post/http/</link>
            <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/http/</guid>
            <description>&lt;p&gt;#《图解HTTP》总结
等签证心累，总结一下前段时间看完的《图解HTTP》，顺便复习。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>10个步骤使用Hugo搭建github博客</title>
            <link>http://ljxxcaijing.github.io/post/first/</link>
            <pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/first/</guid>
            <description>

&lt;h1 id=&#34;hello-hugo:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Hello, Hugo!&lt;/h1&gt;

&lt;p&gt;历经一个星期，博客终于出来了。&lt;br /&gt;
首先撒花～&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;先介绍一下Hugo吧&lt;br /&gt;
1.Hugo is a general-purpose website framework.&lt;br /&gt;
2.Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;br /&gt;
3.Hugo两大特点就是：“简单”和“快速”。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;用hugo搭blog步骤如下:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;用Hugo搭blog步骤如下：&lt;/h1&gt;

&lt;p&gt;1,&lt;br /&gt;
在Github上建一个仓库，并命名为“你的用户名.github.io”&lt;/p&gt;

&lt;p&gt;2,&lt;br /&gt;
Mac中直接使用 Homebrew 安装Hugo,直接在终端里面输入&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;$ brew new Hugo&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;3,&lt;br /&gt;
使用Hugo建立网站,在我们想要搭建博客的目录下创建新的 hugo 站点&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir blog
$ hugo new site blog/&lt;/code&gt;&lt;/pre&gt;
这样就把Hugo的相关文件建立在了blog目录中&lt;/p&gt;

&lt;p&gt;4,&lt;br /&gt;
进入blog目录，看一下其中的内容&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;$ cd blog
$ ls&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;可以看到&lt;br /&gt;
 &lt;pre&gt;&lt;code&gt;▸ archetypes/
 ▸ content/
 ▸ layouts/
 ▸ static/
   config.toml&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中config.toml是网站的配置文件，包括baseurl, title, copyright等网站参数。&lt;br /&gt;
打开config.toml，修改其中的baseurl&lt;br /&gt;
&lt;pre&gt;&lt;code&gt; baseurl = &amp;ldquo;&lt;a href=&#34;http://ljxxcaijing.github.io&amp;quot;&#34;&gt;http://ljxxcaijing.github.io&amp;quot;&lt;/a&gt; &lt;/pre&gt;&lt;/code&gt;
这样就可以连接到github上面的页面，一会儿再做相关的完善&lt;/p&gt;

&lt;p&gt;5,&lt;br /&gt;
然后开始配置主题&lt;br /&gt;
Hugo有很多模版，我选择的模版是 hugo-multi-bootswatch（不过我不是很喜欢这个主题，所以后来又换了别的）&lt;br /&gt;
先创建一个themes的文件夹，然后把主题有关的文件clone进去&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;$ cd blog
$ mkdir themes
$ cd themes
$ git clone &lt;a href=&#34;https://github.com/mpas/hugo-multi-bootswatch.git&#34;&gt;https://github.com/mpas/hugo-multi-bootswatch.git&lt;/a&gt; &amp;ndash;depth=1&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6,&lt;br /&gt;
主题下载好了以后，再打开config.toml完善配置&lt;br /&gt;
例如：&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;# 基本信息&lt;/p&gt;

&lt;p&gt;baseurl = &amp;ldquo;&lt;a href=&#34;http://ljxxcaijing.github.io&amp;quot;&#34;&gt;http://ljxxcaijing.github.io&amp;quot;&lt;/a&gt;&lt;br /&gt;
languageCode = &amp;ldquo;en-us&amp;rdquo;&lt;br /&gt;
title = &amp;ldquo;Never But Life&amp;rdquo;&lt;br /&gt;
theme =&amp;ldquo;hugo-multi-bootswatch&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[params]&lt;/p&gt;

&lt;p&gt;github = &amp;ldquo;&lt;a href=&#34;https://github.com/ljxxcaijing&amp;quot;&#34;&gt;https://github.com/ljxxcaijing&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[params.strings]&lt;/p&gt;

&lt;h1 id=&#34;导航标题:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;导航标题&lt;/h1&gt;

&lt;p&gt;home_navbar_link = &amp;ldquo;首页&amp;rdquo;&lt;br /&gt;
blog_navbar_link = &amp;ldquo;文章&amp;rdquo;&lt;/p&gt;

&lt;p&gt;date_format = &amp;lsquo;2016.04.24&amp;rsquo;&lt;br /&gt;
posts_list_header = &amp;ldquo;文章列表&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[params.theme]&lt;/p&gt;

&lt;p&gt;inverse = true&lt;br /&gt;
name = &amp;ldquo;flatly&amp;rdquo;&lt;br /&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;主题选择好以后，我们可以先在本地运行一下blog，看一下效果。
在blog目录中运行：
&lt;pre&gt;&lt;code&gt;$ hugo server &amp;ndash;theme=hugo-multi-bootswatch &amp;ndash;buildDrafts&lt;/pre&gt;&lt;/code&gt;
然后根据提示，在浏览器中打开 &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; 即可预览blog的效果&lt;/p&gt;

&lt;p&gt;7,&lt;br /&gt;
一个blog还需要一些必备特殊的功能，首先就是代码高亮&lt;br /&gt;
使代码高亮有多种方法，我选择的是安装一个highlight.js插件&lt;br /&gt;
使用npm下载安装highlight.js&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;$ npm install highlight.js&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后打开layouts/partials/header_includes.html&lt;br /&gt;
加上以下代码： （使用的时候注意把书名号换成英文的）&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;《script src=&amp;ldquo;&lt;a href=&#34;http://cdn.bootcss.com/highlight.js/9.0.0/highlight.min.js&amp;quot;&amp;gt;《/script&amp;gt;&#34;&gt;http://cdn.bootcss.com/highlight.js/9.0.0/highlight.min.js&amp;quot;&amp;gt;《/script&amp;gt;&lt;/a&gt;
《link href=&amp;ldquo;&lt;a href=&#34;http://cdn.bootcss.com/highlight.js/9.0.0/styles/default.min.css&amp;quot;&#34;&gt;http://cdn.bootcss.com/highlight.js/9.0.0/styles/default.min.css&amp;quot;&lt;/a&gt; rel=&amp;ldquo;stylesheet&amp;rdquo;&amp;gt;
《script&amp;gt;hljs.initHighlightingOnLoad();《/script&amp;gt;&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样以后，你就可以写文章的时候，让自己的代码高亮&lt;br /&gt;
格式如下，使用的时候注意把书名号换成英文的
&lt;pre&gt;&lt;code&gt;《pre》《code》需要高亮的东西《/pre》《code》&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8,&lt;br /&gt;
然后就可以开始写博文啦&lt;br /&gt;
使用Hugo新建名为 first.md 的markdown文档,放到 post 目录&lt;br /&gt;
以后写文章也是要在post目录中新建
&lt;pre&gt;&lt;code&gt;$ hugo new post/first.md&lt;/pre&gt;&lt;/code&gt;
编辑first.md&lt;br /&gt;
以下内容为一般模版：&lt;pre&gt;&lt;code&gt;
+++
title        = &amp;ldquo;文章标题&amp;rdquo;
tags         = [&amp;ldquo;标签1&amp;rdquo;, &amp;ldquo;标签2&amp;rdquo;]
categories   = [&amp;ldquo;分类1&amp;rdquo;,&amp;ldquo;分类2&amp;rdquo;]
date         = &amp;ldquo;2016-04-24&amp;rdquo;
+++
正文，你好 Hugo ！&lt;/pre&gt;&lt;code&gt;&lt;/p&gt;

&lt;p&gt;9,&lt;br /&gt;
最后一步是blog成功的关键：部署！&lt;br /&gt;
也就是把相关内容push到github上面去&lt;br /&gt;
首先在blog目录下部署，通过命令来生成 public 目录，然后将public部署到服务器，同时设置了URL&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ hugo &amp;ndash;theme= &amp;ndash;baseUrl=hugo-multi-bootswatch &amp;ldquo;&lt;a href=&#34;http://ljxxcaijing.github.io/&amp;quot;&#34;&gt;http://ljxxcaijing.github.io/&amp;quot;&lt;/a&gt;&lt;/pre&gt;&lt;/code&gt;
然后把public目录push到github上面&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ cd public
$ git init  // 对 public 开始进行 git 管理
$ git remote add origin &lt;a href=&#34;https://github.com/ljxxcaijing/ljxxcaijing.github.io.git&#34;&gt;https://github.com/ljxxcaijing/ljxxcaijing.github.io.git&lt;/a&gt; // 添加远程仓库
$ git remote rm origin //如果你手抖不小心添加错了仓库，可以输入这一行来删除原来的仓库，添加正确的仓库
$ git add -A  // 跟踪所有文件
$ git commit -m &amp;ldquo;first commit&amp;rdquo; // 提交
$ git push -u origin master // 推送到远程仓库&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;public的文件成功push到Github上以后，你就可以访问
&lt;a href=&#34;https://ljxxcaijing.github.io&#34;&gt;https://ljxxcaijing.github.io&lt;/a&gt;
看到自己的blog啦&lt;/p&gt;

&lt;p&gt;10,&lt;br /&gt;
之后如果写了新的文章，可以在blog目录下通过以下步骤更新
&lt;pre&gt;&lt;code&gt;$ hugo // 更新 public
$ cd public
$ git add -A
$ git commit -m &amp;ldquo;文章更新&amp;rdquo;
$ git push -u origin master&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;
不过不要着急，过两分钟再去刷新你的blog，虽然Hugo很快，但还是做不到几秒钟就能完成部署和更新。&lt;/p&gt;

&lt;h1 id=&#34;参考教程:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;参考教程：&lt;/h1&gt;

&lt;p&gt;1.&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;Hugo中文文档&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://www.jianshu.com/p/b66754c0baa6&#34;&gt;使用 Hugo + Github 搭建个人博客
&lt;/a&gt;&lt;br /&gt;
3.&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;Hugo静态网站生成器中文教程&lt;/a&gt;&lt;br /&gt;
4.&lt;a href=&#34;https://github.com/spf13&#34;&gt;Hugo作者的github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;最后是感谢时间:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;最后是感谢时间：&lt;/h1&gt;

&lt;p&gt;感谢我的爸爸妈妈，感谢木犀。&lt;br /&gt;
感谢诗柔帮我解决git有关问题，感谢朱组长慧眼发现我的仓库命名出错。&lt;br /&gt;
谢谢大家！ 鞠躬！ 撒花！&lt;/p&gt;

&lt;p&gt;一切都还在摸索当中，希望我的blog能越来越好看！&lt;/p&gt;
</description>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  </channel>
</rss>
