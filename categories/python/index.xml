<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Never But Life</title>
    <link>http://ljxxcaijing.github.io/categories/python/</link>
    <description>Recent content in Python on Never But Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ljxxcaijing.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>API是什么？能做什么？</title>
            <link>http://ljxxcaijing.github.io/post/api/</link>
            <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/api/</guid>
            <description>

&lt;h1 id=&#34;api是什么-能做什么:00e71df22262087fd8ad820708997657&#34;&gt;API是什么？能做什么?&lt;/h1&gt;

&lt;h1 id=&#34;api-application-programming-interface-应用程序编程接口:00e71df22262087fd8ad820708997657&#34;&gt;API（Application Programming Interface,应用程序编程接口）&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;最简单的API请求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://freegeoip.net/json/50.78.253.58&#34;&gt;http://freegeoip.net/json/50.78.253.58&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;API和网址访问的区别：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API可以通过HTTP协议下载文件，几乎可以实现所有在网上干的事情&lt;/li&gt;
&lt;li&gt;API请求使用非常严谨的语法&lt;/li&gt;
&lt;li&gt;API使用JSON或者XML格式表示数据，而不是HTML格式&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、GET&lt;/p&gt;

&lt;p&gt;“喂，网络服务器，请按照这个网址给我信息。”
访问&lt;a href=&#34;http://ljxxcaijing.github.io/post/时，就会使用GET方法&#34;&gt;http://ljxxcaijing.github.io/post/时，就会使用GET方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、POST&lt;/p&gt;

&lt;p&gt;“请吧信息保存在你的数据库里。”
填写表单或者提交信息到网络服务器的后端时，就会使用POST方法&lt;/p&gt;

&lt;p&gt;3、PUT&lt;/p&gt;

&lt;p&gt;更新一个对象或者信息&lt;/p&gt;

&lt;p&gt;4、DELETE&lt;/p&gt;

&lt;p&gt;删除一个对象，在公用API里不常用&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;验证：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目的：“限制”用户使用API&lt;/p&gt;

&lt;p&gt;方式：使用令牌token的方式，令牌是通过服务器对用户名和密码的组合处理后生成的&lt;/p&gt;

&lt;p&gt;API key或者OAuth&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;服务器响应：&lt;/strong&gt;
API会返回格式友好的数据，数据格式大部分是JSON和XML。&lt;/p&gt;

&lt;p&gt;XML:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;user&amp;gt;&amp;lt;firstname&amp;gt;Ryan&amp;lt;/firstname&amp;gt;&amp;lt;lastname&amp;gt;Mitchell&amp;lt;/lastname&amp;gt;&amp;lt;username&amp;gt;Kludgist&amp;lt;/username&amp;gt;&amp;lt;/user&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSON:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{&amp;quot;user&amp;quot;:{&amp;quot;firstname&amp;quot;:&amp;quot;Ryan&amp;quot;,&amp;quot;Lastname&amp;quot;:&amp;quot;Mitchell&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;Kludgist&amp;quot;}}&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;API调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;URL:需要的数据范围&lt;/p&gt;

&lt;p&gt;查询参数：过滤器或附加请求&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;解析JSON：
这是一个坑，以后会填的坑……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;开放的API平台：&lt;/p&gt;

&lt;p&gt;国内：&lt;/p&gt;

&lt;p&gt;豆瓣API（现在不能用了）
微博API（&lt;a href=&#34;http://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI）&#34;&gt;http://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;国外：&lt;/p&gt;

&lt;p&gt;google API（&lt;a href=&#34;https://console.developers.google.com/apis/api/places_backend/overview?hl=zh-cn）&#34;&gt;https://console.developers.google.com/apis/api/places_backend/overview?hl=zh-cn）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter API（pip install twitter）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;解析JSON数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON解析库是Python标准库的一部分，&lt;/p&gt;

&lt;p&gt;Python把JSON转换成字典，JSON数组转换成列表，JSON字符转换成Python字符串。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;API与网络数据采集的关系&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import json&lt;/code&gt;
未完待续……&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Python正则表达式与爬虫</title>
            <link>http://ljxxcaijing.github.io/post/zhengze/</link>
            <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
            
            <guid>http://ljxxcaijing.github.io/post/zhengze/</guid>
            <description>

&lt;h1 id=&#34;python正则表达式总结:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;Python正则表达式总结&lt;/h1&gt;

&lt;p&gt;当初学Python的时候，看完了基础部分就去看Flask，所以回过头来看正则表达式，其实是因为爬虫应用中，要用正则表达式来做选择和匹配。所以完整的看了正则表达式。&lt;/p&gt;

&lt;p&gt;总结了一些常用的知识点。&lt;/p&gt;

&lt;h1 id=&#34;正则表达式:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;正则表达式：&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;闭包操作符&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;｜  任意多个&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.   任意单个&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;python正则表达式:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;Python正则表达式：&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;常用is 和 is not&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;import re 导入有关正则的re模块&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;compile() 编译正则表达式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;group() 匹配对象，没有子组返回空元组&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;groups() 匹配对象，没有自组返回全部匹配对象&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match() 匹配字符串，结合group()显示成功的匹配&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;search() 在一个字符串中查找一个模式
匹配了返回对象，否则返回None&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;findall() 找到每个出现的匹配部分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sub() 搜索和替换&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;subn() 替换&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;split() 分割&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;example:ef896b9194fe4f3a23ec79d18144d994&#34;&gt;EXAMPLE:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;使用re.match查找 – 匹配开始&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.match(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;lt;_sre.SRE_Match object at 0xb743e720&amp;lt;
&amp;gt;&amp;gt;&amp;gt; match = re.match(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;dog&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用re.search查找 – 匹配任意位置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;search(r&#39;cat&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;cat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; match = re.search(r&#39;dog&#39;, &#39;dog cat dog&#39;)
&amp;gt;&amp;gt;&amp;gt; match.group(0)
&#39;dog&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用 re.findall – 所有匹配对象(多)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[&#39;dog&#39;, &#39;dog&#39;]
&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;cat&#39;, &#39;dog cat dog&#39;)
[&#39;cat&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
